{
    "name": "inpainting_celebahq", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": "/kaggle/input/o64-new-m5-mean-47/47" 
        // "resume_state": null // ex: 100, loading .state  and .pth from given epoch and iteration
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.dataset", "InpaintDataset"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    "data_root": "/kaggle/working/o64_m5_mean/datasets/celebahq/flist/train_64_28000.flist",
                    "data_len": -1,
                    "mask_config": {
                        "mask_mode": "hybrid",
                        "phase": "train"
                    }
                } 
            },
            "dataloader":{
                "validation_split": 2, // percent or number 
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 5, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 1, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": false,
                    "pin_memory": true,
                    "drop_last": false
                }
            }
        },
        "test": { 
            "which_dataset": {
                "name": "InpaintDataset", // import Dataset() class / function(not recommend) from default file
                "args":{
                    "data_root": "/kaggle/working/o64_m5_mean/datasets/celebahq/flist/test_64_2000.flist",
                    "mask_config": {
                        "mask_mode": "center",
                        "phase": "test"
                    }
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 4,
                    "num_workers": 4,
                    "pin_memory": true
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            "name": ["models.model", "Palette"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "sample_num": 8, // process of each image
                "task": "inpainting",
                "ema_scheduler": {
                    "ema_start": 1,
                    "ema_iter": 1,
                    "ema_decay": 0.9999
                },
                "optimizers": [
                    { "lr": 5e-5, "weight_decay": 0}
                ]
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.network", "Network"], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "guided_diffusion", // sr3 | guided_diffusion
                    "unet": {
                        "in_channel": 6,
                        "out_channel": 3,
                        "inner_channel": 64,
                        "channel_mults": [
                            1,
                            2,
                            4,
                            8
                        ],
                        "attn_res": [
                            // 32,
                            16
                            // 8
                        ],
                        "num_head_channels": 32,
                        "res_blocks": 2,
                        "dropout": 0.2,
                        "image_size": 64
                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 2000,
                            // "n_timestep": 10, // debug
                            "linear_start": 1e-6,
                            "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "linear",
                            "n_timestep": 1000,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 1000, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 1, // valdation every specified number of epochs
        "save_checkpoint_epoch": 10,
        "log_iter": 1e3, // log every specified number of iterations
        "tensorboard" : false, // tensorboardX enable
        "min_val_mae_loss": 0.029081176966428757,
        "min_val_flag": false,
        "train_previous": [0.041840643683318024, 0.018038276328730535, 0.015495542935569373, 0.013917506750859603, 0.012748092623245746, 0.011969137546192556, 0.011457200938200997, 0.011050162346079093, 0.010923457532410079, 0.011028308625451047, 0.01043192337895679, 0.010170307549721945, 0.009722301972779571, 0.010129829321330977, 0.009722624705103525, 0.009479137049014798, 0.00982258037387897, 0.009520125576400645, 0.009941923573355677, 0.009649747289727551, 0.009299306488078708, 0.009229037110665486, 0.009096198806378226, 0.00924568656004722, 0.009233184618686998, 0.009166537001435946, 0.009344340023604063, 0.009094679170171876, 0.009198333001427146, 0.008972051777380563, 0.009079156664220576, 0.008741306936103392, 0.008807971283969996, 0.008733712626798546, 0.008441452554149595, 0.008754535364946855, 0.00862464377413924, 0.008537656418614691, 0.008630405649200144, 0.008547815773613231, 0.008389369654602522, 0.008471517241261035, 0.008803676903605832, 0.008378026463909347, 0.00865216095200791, 0.008367747247290528, 0.00834620230243531],
        "eval_previous": [0.07172951847314835, 0.0797385647892952, 0.058855585753917694, 0.041983991861343384, 0.05516674369573593, 0.04389449954032898, 0.04812374711036682, 0.043669186532497406, 0.034008242189884186, 0.04237528145313263, 0.03738551586866379, 0.04004747420549393, 0.037450727075338364, 0.037677280604839325, 0.046797554939985275, 0.037993814796209335, 0.049716293811798096, 0.03561285138130188, 0.03716634213924408, 0.03925253078341484, 0.0381338968873024, 0.03955516964197159, 0.03575535863637924, 0.035999685525894165, 0.033351704478263855, 0.035688526928424835, 0.04087737947702408, 0.03219299763441086, 0.03411487862467766, 0.03309572488069534, 0.03974170982837677, 0.034929852932691574, 0.03764645382761955, 0.036682501435279846, 0.04645901918411255, 0.03873719274997711, 0.032285839319229126, 0.03534640371799469, 0.033892400562763214, 0.03509426489472389, 0.03993877023458481, 0.029081176966428757, 0.034649863839149475, 0.032400548458099365, 0.038239073008298874, 0.04712042585015297, 0.03893455117940903]
    },
    
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 2,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}
