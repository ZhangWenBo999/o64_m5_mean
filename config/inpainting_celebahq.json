{
    "name": "inpainting_celebahq", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": "/kaggle/input/o64-m5-46/46" 
        // "resume_state": null // ex: 100, loading .state  and .pth from given epoch and iteration
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.dataset", "InpaintDataset"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ // arguments to initialize dataset
                    "data_root": "/kaggle/working/o64_m5_mean/datasets/celebahq/flist/train_64_28000.flist",
                    "data_len": -1,
                    "mask_config": {
                        "mask_mode": "hybrid",
                        "phase": "train"
                    }
                } 
            },
            "dataloader":{
                "validation_split": 4, // percent or number
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 5, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 2, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": false,
                    "pin_memory": true,
                    "drop_last": true
                }
            }
        },
        "test": { 
            "which_dataset": {
                "name": "InpaintDataset", // import Dataset() class / function(not recommend) from default file
                "args":{
                    "data_root": "/kaggle/working/o64_m5_mean/datasets/celebahq/flist/test_64_2000.flist",
                    "mask_config": {
                        "mask_mode": "center",
                        "phase": "test"
                    }
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 4,
                    "num_workers": 4,
                    "pin_memory": true
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            "name": ["models.model", "Palette"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "sample_num": 8, // process of each image
                "task": "inpainting",
                "ema_scheduler": {
                    "ema_start": 1,
                    "ema_iter": 1,
                    "ema_decay": 0.9999
                },
                "optimizers": [
                    { "lr": 5e-5, "weight_decay": 0}
                ]
            }
        }, 
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.network", "Network"], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "guided_diffusion", // sr3 | guided_diffusion
                    "unet": {
                        "in_channel": 6,
                        "out_channel": 3,
                        "inner_channel": 64,
                        "channel_mults": [
                            1,
                            2,
                            4,
                            8
                        ],
                        "attn_res": [
                            // 32,
                            16
                            // 8
                        ],
                        "num_head_channels": 32,
                        "res_blocks": 2,
                        "dropout": 0.2,
                        "image_size": 64
                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 2000,
                            // "n_timestep": 10, // debug
                            "linear_start": 1e-6,
                            "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "linear",
                            "n_timestep": 1000,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        }
                    }
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 92, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 1, // valdation every specified number of epochs
        "save_checkpoint_epoch": 10,
        "log_iter": 1e3, // log every specified number of iterations
        "tensorboard" : false, // tensorboardX enable
        "min_val_mae_loss": 0.042597830295562744,
        "min_val_flag": false,
        "train_previous": [0.09207007282197152, 0.019778672585824233, 0.01672869304786192, 0.014333332832400746, 0.012533114694364286, 0.012383436115494537, 0.012000137979582859, 0.011102141752288153, 0.010648752379703403, 0.010780364400066694, 0.010518945786783798, 0.01052188163059095, 0.010330661364545348, 0.010409019201681005, 0.009477591563533113, 0.009945631707562666, 0.010060718341738651, 0.009733001573214453, 0.00939978472849091, 0.009480474764031408, 0.009188750743111707, 0.009019012626104371, 0.009390794199593641, 0.009379787478605973, 0.00915435412921005, 0.008794438432704221, 0.008670028853004757, 0.00911220011346184, 0.009130338023116642, 0.008921634325040792, 0.009116297423203572, 0.008806930132078821, 0.008601230065072327, 0.008710770263238734, 0.008723509130306634, 0.008840021275722297, 0.009093426250528657, 0.008845324819278777, 0.008821584726121308, 0.008707457127599728, 0.008871387084686395, 0.008638970792549036, 0.008521723954658802, 0.008593453235550089, 0.008503136829943693, 0.008774103240957825],
        "eval_previous": [0.09347358345985413, 0.08274880796670914, 0.08056110143661499, 0.07182568311691284, 0.06637940555810928, 0.09110356867313385, 0.060803044587373734, 0.06624269485473633, 0.05426179617643356, 0.05361458659172058, 0.06819050014019012, 0.05829395353794098, 0.058197636157274246, 0.06367608904838562, 0.0572359636425972, 0.056868866086006165, 0.05609268695116043, 0.07510602474212646, 0.061640627682209015, 0.056413762271404266, 0.05938348174095154, 0.054745838046073914, 0.051056310534477234, 0.05493398755788803, 0.056802909821271896, 0.05344401299953461, 0.05538944900035858, 0.047535188496112823, 0.05523210018873215, 0.05083168298006058, 0.046321697533130646, 0.05702482908964157, 0.051148660480976105, 0.054186537861824036, 0.04521970823407173, 0.04555618017911911, 0.0487009733915329, 0.042597830295562744, 0.0644618421792984, 0.04308736324310303, 0.0513981394469738, 0.05410974472761154, 0.04891393706202507, 0.054563142359256744, 0.05129719153046608, 0.0526423417031765]
    },
    
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 2,
        "debug_split": 50 // percent or number, change the size of dataloder to debug_split.
    }
}
